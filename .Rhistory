U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
UI2 = UI;
UI2[is.na(UI2)] = 0;
UI
tcrossprod(UI2)
v %*% t(v)
User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
v = sqrt(apply(UI2*UI2,1,sum));
User_Similarity = tcrossprod(UI2)/v %*% t(v);
User_Similarity
v = sqrt(apply(UI2*UI2,1,sum));
User_Similarity = tcrossprod(UI2);
User_Similarity
UBCF <- function(UI){
#User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
User_Similarity = as.matrix(1/dist(UI))
User_Similarity[is.infinite(User_Similarity)] = 0;
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity = tcrossprod(UI2);
UI2 = UI;
UI2[is.na(UI2)] = 0;
#User_Similarity = as.matrix(1/dist(UI2));
count = apply(UI2, 1, function(x) sum(x!=0)) - (UI2!=0)*1;
sum_user_rate_other = apply(UI2, 1, function(x) sum(x[x!=0])) - UI2;
R = sum_user_rate_other / count;
#remove trace of similarity matrix
for(i in c(1:dim(User_Similarity)[1])) { User_Similarity[i,i]=0; }
User_Similarity[is.na(User_Similarity)] = 0;
#User_Similarity = User_Similarity*abs(User_Similarity)**1.5
# P is predict matrix
P = R + User_Similarity %*% (UI2-R) /apply(abs(User_Similarity),1,sum);
D = P - UI;
RMSE = sum(apply(D*D,1,function(x) sum(x[!is.na(x)])))/sum(!is.na(D)*1)
result = list(predict = P,RMSE = RMSE);
return (result);
}
P = UBCF(UI);
P$predict
P$RMSE
U1 = c(4,NA,5,5);
U2 = c(4,2,1,NA);
U3 = c(3,NA,2,4);
U4 = c(4,4,NA,NA);
U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
#UI2 = UI;
#UI2[is.na(UI2)] = 0;
#UI
#tcrossprod(UI2)
#v %*% t(v)
#User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2);
#User_Similarity
UBCF <- function(UI){
#User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#User_Similarity = as.matrix(1/dist(UI))
#User_Similarity[is.infinite(User_Similarity)] = 0;
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity = tcrossprod(UI2);
UI2 = UI;
UI2[is.na(UI2)] = 0;
#User_Similarity = as.matrix(1/dist(UI2));
count = apply(UI2, 1, function(x) sum(x!=0)) - (UI2!=0)*1;
sum_user_rate_other = apply(UI2, 1, function(x) sum(x[x!=0])) - UI2;
R = sum_user_rate_other / count;
#remove trace of similarity matrix
for(i in c(1:dim(User_Similarity)[1])) { User_Similarity[i,i]=0; }
User_Similarity[is.na(User_Similarity)] = 0;
#User_Similarity = User_Similarity*abs(User_Similarity)**1.5
# P is predict matrix
P = R + User_Similarity %*% (UI2-R) /apply(abs(User_Similarity),1,sum);
D = P - UI;
RMSE = sum(apply(D*D,1,function(x) sum(x[!is.na(x)])))/sum(!is.na(D)*1)
result = list(predict = P,RMSE = RMSE,Similarity=User_Similarity);
return (result);
}
P = UBCF(UI);
P$predict
P$RMSE
P$Similarity
U1 = c(4,NA,5,5);
U2 = c(4,2,1,NA);
U3 = c(3,NA,2,4);
U4 = c(4,4,NA,NA);
U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
#UI2 = UI;
#UI2[is.na(UI2)] = 0;
#UI
#tcrossprod(UI2)
#v %*% t(v)
#User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2);
#User_Similarity
UBCF <- function(UI){
User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#User_Similarity = as.matrix(1/dist(UI))
#User_Similarity[is.infinite(User_Similarity)] = 0;
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity = tcrossprod(UI2);
UI2 = UI;
UI2[is.na(UI2)] = 0;
#User_Similarity = as.matrix(1/dist(UI2));
count = apply(UI2, 1, function(x) sum(x!=0)) - (UI2!=0)*1;
sum_user_rate_other = apply(UI2, 1, function(x) sum(x[x!=0])) - UI2;
R = sum_user_rate_other / count;
#remove trace of similarity matrix
for(i in c(1:dim(User_Similarity)[1])) { User_Similarity[i,i]=0; }
User_Similarity[is.na(User_Similarity)] = 0;
#User_Similarity = User_Similarity*abs(User_Similarity)**1.5
# P is predict matrix
P = R + User_Similarity %*% (UI2-R) /apply(abs(User_Similarity),1,sum);
D = P - UI;
RMSE = sum(apply(D*D,1,function(x) sum(x[!is.na(x)])))/sum(!is.na(D)*1)
result = list(predict = P,RMSE = RMSE,Similarity=User_Similarity);
return (result);
}
P = UBCF(UI);
P$predict
P$RMSE
P$Similarity
U1 = c(4,NA,5,5);
U2 = c(4,2,1,NA);
U3 = c(3,NA,2,4);
U4 = c(4,4,NA,NA);
U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
#UI2 = UI;
#UI2[is.na(UI2)] = 0;
#UI
#tcrossprod(UI2)
#v %*% t(v)
#User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2);
#User_Similarity
UBCF <- function(UI){
User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#User_Similarity = as.matrix(1/dist(UI))
#User_Similarity[is.infinite(User_Similarity)] = 0;
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity = tcrossprod(UI2);
UI2 = UI;
UI2[is.na(UI2)] = 0;
#User_Similarity = as.matrix(1/dist(UI2));
count = apply(UI2, 1, function(x) sum(x!=0)) - (UI2!=0)*1;
sum_user_rate_other = apply(UI2, 1, function(x) sum(x[x!=0])) - UI2;
R = sum_user_rate_other / count;
#remove trace of similarity matrix
for(i in c(1:dim(User_Similarity)[1])) { User_Similarity[i,i]=0; }
User_Similarity[is.na(User_Similarity)] = 0;
#User_Similarity = User_Similarity*abs(User_Similarity)**1.5
# P is predict matrix
P = R + User_Similarity %*% (UI2-R) /apply(abs(User_Similarity),1,sum);
D = P - UI;
RMSE = sum(apply(D*D,1,function(x) sum(x[!is.na(x)])))/sum(!is.na(D)*1)
result = list(predict = P,RMSE = RMSE,Similarity=User_Similarity);
return (result);
}
P = UBCF(UI);
P$predict
P$RMSE
P$Similarity
UI
U1 = c(4,NA,5,5);
U2 = c(4,2,1,NA);
U3 = c(3,NA,2,4);
U4 = c(4,4,NA,NA);
U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
#UI2 = UI;
#UI2[is.na(UI2)] = 0;
#UI
#tcrossprod(UI2)
#v %*% t(v)
#User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2);
#User_Similarity
UBCF <- function(UI,W){
#User_Similarity = as.matrix(1/dist(UI))
#User_Similarity[is.infinite(User_Similarity)] = 0;
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity = tcrossprod(UI2);
UI2 = UI;
UI2[is.na(UI2)] = 0;
#User_Similarity = as.matrix(1/dist(UI2));
count = apply(UI2, 1, function(x) sum(x!=0)) - (UI2!=0)*1;
sum_user_rate_other = apply(UI2, 1, function(x) sum(x[x!=0])) - UI2;
R = sum_user_rate_other / count;
#remove trace of similarity matrix
#User_Similarity = User_Similarity*abs(User_Similarity)**1.5
# P is predict matrix
P = R + W %*% (UI2-R) /apply(abs(W),1,sum);
D = P - UI;
RMSE = sum(apply(D*D,1,function(x) sum(x[!is.na(x)])))/sum(!is.na(D)*1)
result = list(predict = P,RMSE = RMSE);
return (result);
}
User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
for(i in c(1:dim(User_Similarity)[1])) { User_Similarity[i,i]=0; }
User_Similarity[is.na(User_Similarity)] = 0;
P = UBCF(UI);
P$predict
P$RMSE
U1 = c(4,NA,5,5);
U2 = c(4,2,1,NA);
U3 = c(3,NA,2,4);
U4 = c(4,4,NA,NA);
U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
#UI2 = UI;
#UI2[is.na(UI2)] = 0;
#UI
#tcrossprod(UI2)
#v %*% t(v)
#User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2);
#User_Similarity
UBCF <- function(UI,W){
#User_Similarity = as.matrix(1/dist(UI))
#User_Similarity[is.infinite(User_Similarity)] = 0;
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity = tcrossprod(UI2);
UI2 = UI;
UI2[is.na(UI2)] = 0;
#User_Similarity = as.matrix(1/dist(UI2));
count = apply(UI2, 1, function(x) sum(x!=0)) - (UI2!=0)*1;
sum_user_rate_other = apply(UI2, 1, function(x) sum(x[x!=0])) - UI2;
R = sum_user_rate_other / count;
#remove trace of similarity matrix
#User_Similarity = User_Similarity*abs(User_Similarity)**1.5
# P is predict matrix
P = R + W %*% (UI2-R) /apply(abs(W),1,sum);
D = P - UI;
RMSE = sum(apply(D*D,1,function(x) sum(x[!is.na(x)])))/sum(!is.na(D)*1)
result = list(predict = P,RMSE = RMSE);
return (result);
}
User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
for(i in c(1:dim(User_Similarity)[1])) { User_Similarity[i,i]=0; }
User_Similarity[is.na(User_Similarity)] = 0;
P = UBCF(UI,User_Similarity);
P$predict
P$RMSE
rm(list=ls());
U1 = c(4,NA,5,5);
U2 = c(4,2,1,NA);
U3 = c(3,NA,2,4);
U4 = c(4,4,NA,NA);
U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
#UI2 = UI;
#UI2[is.na(UI2)] = 0;
#UI
#tcrossprod(UI2)
#v %*% t(v)
#User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2);
#User_Similarity
UBCF <- function(UI,W){
#User_Similarity = as.matrix(1/dist(UI))
#User_Similarity[is.infinite(User_Similarity)] = 0;
#v = sqrt(apply(UI2*UI2,1,sum));
#User_Similarity = tcrossprod(UI2)/v %*% t(v);
#User_Similarity = tcrossprod(UI2);
UI2 = UI;
UI2[is.na(UI2)] = 0;
#User_Similarity = as.matrix(1/dist(UI2));
count = apply(UI2, 1, function(x) sum(x!=0)) - (UI2!=0)*1;
sum_user_rate_other = apply(UI2, 1, function(x) sum(x[x!=0])) - UI2;
R = sum_user_rate_other / count;
#remove trace of similarity matrix
#User_Similarity = User_Similarity*abs(User_Similarity)**1.5
# P is predict matrix
P = R + W %*% (UI2-R) /apply(abs(W),1,sum);
D = P - UI;
RMSE = sum(apply(D*D,1,function(x) sum(x[!is.na(x)])))/sum(!is.na(D)*1)
result = list(predict = P,RMSE = RMSE);
return (result);
}
User_Similarity = cor(x=t(UI), use ="pairwise.complete.obs",method = "pearson");
for(i in c(1:dim(User_Similarity)[1])) { User_Similarity[i,i]=0; }
User_Similarity[is.na(User_Similarity)] = 0;
P = UBCF(UI,User_Similarity);
P$predict
P$RMSE
cor(x=t(UI2), use ="pairwise.complete.obs",method = "pearson");
UI2 = UI;
UI2[is.na(UI2)] = 0;
cor(x=t(UI2), use ="pairwise.complete.obs",method = "pearson");
UI2 = UI;
UI2[is.na(UI2)] = 0;
User_Similarity2 = cor(x=t(UI2), use ="pairwise.complete.obs",method = "pearson");
for(i in c(1:dim(User_Similarity2)[1])) { User_Similarity2[i,i]=0; }
User_Similarity2
P = UBCF(UI,User_Similarity2);
P$predict
P$RMSE
P = UBCF(UI2,User_Similarity2);
P$predict
P$RMSE
U1 = c(4,NA,5,5);
U2 = c(4,2,1,NA);
U3 = c(3,NA,2,4);
U4 = c(4,4,NA,NA);
U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
Item_Similarity = cor(x=UI, use ="pairwise.complete.obs",method = "pearson");
View(Item_Similarity)
rm(list=ls());
U1 = c(4,NA,5,5);
U2 = c(4,2,1,NA);
U3 = c(3,NA,2,4);
U4 = c(4,4,NA,NA);
U5 = c(2,1,3,5);
UI = matrix(c(U1,U2,U3,U4,U5),nrow=5,ncol=4,byrow = T);
Item_Similarity = cor(x=UI, use ="pairwise.complete.obs",method = "pearson");
View(Item_Similarity)
View(Item_Similarity)
UI2 = UI;
UI2[is.na(UI2)] = 0;
apply(UI2, 2, function(x) sum(x!=0))
M = count = apply(UI2, 2, function(x) sum(x!=0)) - t((UI2!=0)*1);
M
M = apply(UI2, 2, function(x) sum(x!=0)) - t((UI2!=0)*1);
M
M = t(apply(UI2, 2, function(x) sum(x!=0)) - t((UI2!=0)*1));
M
count = t(apply(UI2, 2, function(x) sum(x!=0)) - t((UI2!=0)*1));
for(i in c(1:dim(Item_Similarity)[1])) { Item_Similarity[i,i]=0; }
Item_Similarity[is.na(Item_Similarity)] = 0;
Item_Similarity
UI
UI2
---
exit
library(rmarkdown); sessionInfo()
update.packages()
y
y
detach("package:rmarkdown", unload=TRUE)
library("knitr", lib.loc="~/Library/R/3.1/library")
install.packages(c("dplyr", "ggplot2", "stringr", "XML", "zoo"))
install.packages("swirl")
install.packages("devtools")
devtools::install_github(c("swirldev/swirl", "swirldev/swirlify"))
library("swirl")
library("swirl", lib.loc="~/Library/R/3.1/library")
library("swirl", lib.loc="~/Library/R/3.1/library")
swirl()
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="~/Library/R/3.1/library")
library("swirl", lib.loc="~/Library/R/3.1/library")
swirl()
5+7
x<- 5 +7
x
x - 3
y <- x-3
y
z <- c(1.1,9,3.14)
?C
?c
z
library("yaml", lib.loc="~/Library/R/3.1/library")
detach("package:swirl", unload=TRUE)
remove.packages(yaml)
install.packages(yaml)
install.packages("yaml")
install.packages("yaml")
uninstall.packages("knitr")
remove.packages("knitr")
install.packages("knitr")
remove.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
render("/Users/aha/Dropbox/Project/2015/03_DSC/2014/R_ETL_LAB/index.Rmd", "all")
rmarkdown::render("/Users/aha/Dropbox/Project/2015/03_DSC/2014/R_ETL_LAB/index.Rmd", "all")
library("rmarkdown", lib.loc="~/Library/R/3.1/library")
rmarkdown::render("/Users/aha/Dropbox/Project/2015/03_DSC/2014/R_ETL_LAB/index.Rmd", "all")
library("yaml", lib.loc="~/Library/R/3.1/library")
rmarkdown::render("/Users/aha/Dropbox/Project/2015/03_DSC/2014/R_ETL_LAB/index.Rmd", "all")
detach("package:rmarkdown", unload=TRUE)
library("rmarkdown", lib.loc="~/Library/R/3.1/library")
rmarkdown::render("/Users/aha/Dropbox/Project/2015/03_DSC/2014/R_ETL_LAB/index.Rmd", "all")
clc
clear
cl
?
cat("\014")
af
cat("\014")
cat("\014")
library("dplyr", lib.loc="~/Library/R/3.1/library")
install.packages(c("Matrix", "sqldf", "TTR"))
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
setwd("~/Dropbox/Project/2015/03_DSC/2015_swirl")
Cl_info = read.table(file="./DSC2015/ETL/cl_info_other.csv",sep=",",stringsAsFactors=F,header=T)
GDP = read.table(file="./DSC2015/ETL/GDP.txt",sep=",",stringsAsFactors=F,header=T)
Cl_info_part = mutate(Cl_info,data_dt = as.POSIXct(data_dt),bank_code = as.factor(bank_code),etl_dt = as.POSIXct(etl_dt))
library(dplyr)
setwd("~/Dropbox/Project/2015/03_DSC/2015_swirl")
Cl_info = read.table(file="./DSC2015/ETL/cl_info_other.csv",sep=",",stringsAsFactors=F,header=T)
GDP = read.table(file="./DSC2015/ETL/GDP.txt",sep=",",stringsAsFactors=F,header=T)
Cl_info_part = mutate(Cl_info,data_dt = as.POSIXct(data_dt),bank_code = as.factor(bank_code),etl_dt = as.POSIXct(etl_dt))
Cl_demo1 = select(Cl_info_part,data_dt,bank_nm,mortgage_bal)
Cl_demo1 = select(Cl_info_part,data_dt,bank_nm,mortgage_bal)
View(Cl_demo1)
Cl_demo2 = filter(Cl_info_part,mortgage_bal>1000000)
Cl_demo3 = mutate(Cl_info_part,MM = mortgage_bal/1000000)
Cl_demo4 = arrange(Cl_info_part,mortgage_bal,desc(data_dt))
Cl_info_part2 = mutate(Cl_info_part,time= as.POSIXct(data_dt,origin="1960-01-01"))
GDP_part = GDP[5:135,]
colnames(GDP_part) = c("time","GDP","GDP_yoy","GDP_2006","GDP_2006_yoy","GDP_minus","GDP_minus_yoy")
GDP_part2= mutate(GDP_part,GDP = as.numeric(gsub(",", "",GDP))*1000000)
GDP_part3 = mutate(GDP_part2,year=as.numeric(substr(time,0,4)),season=as.numeric(substr(time,6,6)))
GDP_part4 = select(GDP_part3,year,season,GDP)
Cl_info_part3 = group_by(Cl_info_part2,time)
Cl_info_part4 = summarise(Cl_info_part3,mortage_total_bal = sum(mortgage_bal, na.rm = TRUE))
GDP_part5 = filter(summarise(group_by(GDP_part4,year),GDP=sum(GDP)),is.na(year)==F)
GDP_part6 = select(mutate(GDP_part5,time = as.POSIXct(paste(year,"1","1",sep="-"))),time,GDP)
t1 = left_join(GDP_part6,Cl_info_part4,by="time")
t2 = filter(t1,is.na(mortage_total_bal)==FALSE)
see1 = filter(mutate(t2,ratio =mortage_total_bal/GDP),is.na(ratio)==FALSE)
library(ggplot2)
ggplot(see1, aes(time, ratio))+geom_smooth(method="loess") +scale_size_area() +geom_point(aes(size = 20), alpha = 1/2)
slidify("index.Rmd");
publish(user = "ntuaha", repo = "R_ETL_DSC_2015", host = 'github')
library(slidify)
library(dplyr)
library(ggplot2)
author(deckdir="/Users/aha/Dropbox/Project/2015/03_DSC/2015",open_rmd=FALSE,use_git=FALSE)
#更新使用
slidify("index.Rmd");
publish(user = "ntuaha", repo = "R_ETL_DSC_2015", host = 'github')
slidify("index.Rmd");
publish(user = "ntuaha", repo = "R_ETL_DSC_2015", host = 'github')
slidify("index.Rmd");
publish(user = "ntuaha", repo = "R_ETL_DSC_2015", host = 'github')
slidify("index.Rmd");
publish(user = "ntuaha", repo = "R_ETL_DSC_2015", host = 'github')
slidify("index.Rmd");
publish(user = "ntuaha", repo = "R_ETL_DSC_2015", host = 'github')
Cl_info = read.table(sep=",", header=TRUE, stringsAsFactors=F,
file= textConnection(
getURL("https://github.com/ntuaha/R_ETL_DSC_2015/raw/
gh-pages/cl_info_other.csv")
))
getURL
library(RCurl)
Cl_info = read.table(sep=",", header=TRUE, stringsAsFactors=F,
file= textConnection(
getURL("https://github.com/ntuaha/R_ETL_DSC_2015/raw/
gh-pages/cl_info_other.csv")
))
Cl_info = read.table(sep=",", header=TRUE, stringsAsFactors=F,
file= textConnection(
getURL("https://github.com/ntuaha/R_ETL_DSC_2015/raw/gh-pages/cl_info_other.csv")
))
View(Cl_info)
file= textConnection( getURL("https://github.com/ntuaha/R_ETL_DSC_2015/raw/gh-pages/cl_info_other.csv") )
f = textConnection( getURL("https://github.com/ntuaha/R_ETL_DSC_2015/raw/gh-pages/cl_info_other.csv") )
f
f.text
getURL("https://github.com/ntuaha/R_ETL_DSC_2015/raw/gh-pages/cl_info_other.csv")
getURL("https://raw.githubusercontent.com/ntuaha/R_ETL_DSC_2015/gh-pages/cl_info_other.csv")
Cl_info = read.table(sep=",", header=TRUE, stringsAsFactors=F,
file= textConnection(
getURL("https://raw.githubusercontent.com/ntuaha/R_ETL_DSC_2015/gh-pages/cl_info_other.csv")
))
View(Cl_info)
str(Cl_info)
GDP = read.table(sep=",", header=TRUE, stringsAsFactors=F,
file= textConnection(
getURL("https://raw.githubusercontent.com/ntuaha/R_ETL_DSC_2015/gh-pages/GDP.txt")
))
slidify("index.Rmd");
publish(user = "ntuaha", repo = "R_ETL_DSC_2015", host = 'github')
slidify("index.Rmd");
publish(user = "ntuaha", repo = "R_ETL_DSC_2015", host = 'github')
